#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>
#include "DHT.h"

// 定义DHT传感器引脚号和类型
const int DHTPin = 4;
const int DHTType = DHT11;

// 定义蓝牙服务UUID和特征UUID
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define TEMPERATURE_UUID    "beb5483e-36e1-4688-b7f5-ea07361b26a9"
#define HUMIDITY_UUID       "beb5483e-36e1-4688-b7f5-ea07361b26aa"

// 定义DHT传感器和温湿度数据变量
DHT dht(DHTPin, DHTType);
float temperature, humidity;

BLECharacteristic *pCharacteristic_Temperature;
BLECharacteristic *pCharacteristic_Humidity;

// 读取温湿度数据的函数
void readDHTData() {
  temperature = dht.readTemperature();
  humidity = dht.readHumidity();

  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("无法读取DHT传感器数据");
    return;
  }
}

// 蓝牙服务器事件处理程序
class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    Serial.println("BLE设备已连接");
  }

  void onDisconnect(BLEServer* pServer) {
    Serial.println("BLE设备已断开");
  }
};

// 蓝牙特征事件处理程序
class MyCallbacks_Temperature: public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pCharacteristic) {
    std::string value = pCharacteristic->getValue();
    Serial.print("接收到的数据：");
    for (int i = 0; i < value.length(); i++) {
      Serial.print(value[i]);
    }
    Serial.println();

    // 在这里添加逻辑以处理从中心设备发送来的数据
  }
};

class MyCallbacks_Humidity: public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pCharacteristic) {
    std::string value = pCharacteristic->getValue();
    Serial.print("接收到的数据：");
    for (int i = 0; i < value.length(); i++) {
      Serial.print(value[i]);
    }
    Serial.println();

    // 在这里添加逻辑以处理从中心设备发送来的数据
  }
};

void setup() {
  Serial.begin(115200);
  dht.begin();

  // 初始化蓝牙
  BLEDevice::init("ESP32C3 DHT11");
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // 创建用于温度数据的特征
  pCharacteristic_Temperature = pService->createCharacteristic(
                                  TEMPERATURE_UUID,
                                  BLECharacteristic::PROPERTY_READ |
                                  BLECharacteristic::PROPERTY_NOTIFY
                                );
  pCharacteristic_Temperature->addDescriptor(new BLE2902());
  pCharacteristic_Temperature->setCallbacks(new MyCallbacks_Temperature());

  // 创建用于湿度数据的特征
  pCharacteristic_Humidity = pService->createCharacteristic(
                               HUMIDITY_UUID,
                               BLECharacteristic::PROPERTY_READ |
                               BLECharacteristic::PROPERTY_NOTIFY
                             );
  pCharacteristic_Humidity->addDescriptor(new BLE2902());
  pCharacteristic_Humidity->setCallbacks(new MyCallbacks_Humidity());

  pService->start();

  // 广告包设置，可以通过蓝牙搜索功能搜索到该设备
  BLEAdvertisementData advertisementData = BLEAdvertisementData();
  advertisementData.setFlags(0x02);
  advertisementData.setCompleteServices(BLEUUID(SERVICE_UUID));
  pServer->getAdvertising()->setAdvertisementData(advertisementData);
  pServer->getAdvertising()->start();
}

void loop() {
  readDHTData();

  // 将温湿度数据转换成字符串并发送到中心设备
  String temperatureStr = "Temperature:" + String(temperature) + "C";
  String humidityStr = "Humidity:" + String(humidity) + "%";

  // 发送温度数据
  std::string dataStr_Temperature = temperatureStr.c_str();
  pCharacteristic_Temperature->setValue(dataStr_Temperature);
  pCharacteristic_Temperature->notify();

  // 发送湿度数据
  std::string dataStr_Humidity = humidityStr.c_str();
  pCharacteristic_Humidity->setValue(dataStr_Humidity);
  pCharacteristic_Humidity->notify();

  Serial.print("温度: ");
  Serial.print(temperature);
  Serial.print("℃, 湿度: ");
  Serial.print(humidity);
  Serial.println("%");

  delay(5000);
}